// <auto-generated />
using System;
using IUOSAT.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IUOSAT.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20191102171332_addgrade")]
    partial class addgrade
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IUOSAT.Domain.Entities.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("GithubUrl");

                    b.Property<string>("Name");

                    b.Property<int>("PersonID");

                    b.HasKey("ArticleID");

                    b.HasIndex("PersonID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("IUOSAT.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("IUOSAT.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleID");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Name");

                    b.Property<int>("ParentID");

                    b.HasKey("CommentID");

                    b.HasIndex("ArticleID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("IUOSAT.Domain.Entities.Cource", b =>
                {
                    b.Property<int>("CourceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CourceID");

                    b.ToTable("Cources");
                });

            modelBuilder.Entity("IUOSAT.Domain.Entities.Grade", b =>
                {
                    b.Property<int>("GradeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishName");

                    b.Property<string>("PersianName");

                    b.HasKey("GradeID");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("IUOSAT.Domain.Entities.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID");

                    b.Property<int>("CourceID");

                    b.Property<string>("Email");

                    b.Property<string>("EnglishAddress");

                    b.Property<string>("EnglishBio");

                    b.Property<string>("EnglishFullName");

                    b.Property<string>("Facebook");

                    b.Property<int>("GradeID");

                    b.Property<byte[]>("Image");

                    b.Property<string>("Instagram");

                    b.Property<string>("PersianAddress");

                    b.Property<string>("PersianBio");

                    b.Property<string>("PersianFullName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Pinteret");

                    b.Property<string>("Twitter");

                    b.Property<string>("WebSite");

                    b.HasKey("PersonID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CourceID");

                    b.HasIndex("GradeID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("IUOSAT.Domain.Entities.PersonSkill", b =>
                {
                    b.Property<int>("PersonSkillID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonID");

                    b.Property<int>("SkillID");

                    b.HasKey("PersonSkillID");

                    b.HasIndex("PersonID");

                    b.HasIndex("SkillID");

                    b.ToTable("PersonSkills");
                });

            modelBuilder.Entity("IUOSAT.Domain.Entities.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("SkillID");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("IUOSAT.Domain.Entities.Article", b =>
                {
                    b.HasOne("IUOSAT.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IUOSAT.Domain.Entities.Comment", b =>
                {
                    b.HasOne("IUOSAT.Domain.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IUOSAT.Domain.Entities.Person", b =>
                {
                    b.HasOne("IUOSAT.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IUOSAT.Domain.Entities.Cource", "Cource")
                        .WithMany()
                        .HasForeignKey("CourceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IUOSAT.Domain.Entities.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IUOSAT.Domain.Entities.PersonSkill", b =>
                {
                    b.HasOne("IUOSAT.Domain.Entities.Person", "Person")
                        .WithMany("PersonSkills")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IUOSAT.Domain.Entities.Skill", "Skill")
                        .WithMany("PersonSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
